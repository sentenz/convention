#!/bin/bash
#
# The "commit-msg" hook is run just before "git commit" starts doing its job, and can prevent the
# command from running by exiting with non-zero status.
#
# Details:
# Enforce commit conventions by verify the commit log message. The hook is allowed to edit the
# commit message file.
#
# Arguments:
#   $1 - the name of the file that has the commit message
#
# Returns:
#   Exitcode

# -x: print a trace (debug)
# -u: treat unset variables
# -o pipefail: return value of a pipeline
set -uo pipefail

# Include Scripts

source ./scripts/shell/log.sh
source ./scripts/shell/fs.sh
source ./scripts/shell/git.sh
source ./scripts/shell/hook.sh

# Constant Variables

COMMIT_MESSAGE_FILE="${1}"
readonly COMMIT_MESSAGE_FILE

LOG_FILE="$(git_get_root_dir)/logs/githooks/commit-msg.log"
readonly LOG_FILE

# Internal Functions

run_commit_msg() {
  local -i result=0

  fs_create_file "${LOG_FILE}"

  hook_enforce_commit_message_convention "make run-linter-commit" "${COMMIT_MESSAGE_FILE}" &>"${LOG_FILE}"
  ((result = $?))
  if ((result == 1)); then
    log_message "githooks" "pre-push" "${result}"

    return "${result}"
  fi

  # fs_remove_file "${LOG_FILE}"

  return "${result}"
}

# Control Flow Logic

run_commit_msg
exit "${?}"

#!/bin/bash
#
# The "pre-push" hook is called by "git push" after it has checked the remote status, but before
# anything has been pushed. If this script exits with a non-zero status nothing will be pushed.
#
# Details:
# - Prevent a direct push to the base branches.
# - Enforce naming convention for support branches.
#
# Arguments:
#   $1 - the name of the remote to which the push is being done
#   $2 - URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# Returns:
#   Exitcode

# -x: print a trace (debug)
# -u: treat unset variables
# -o pipefail: return value of a pipeline
set -uo pipefail

# Include libraries

. ./scripts/utils/log.sh
. ./scripts/utils/fs.sh
. ./scripts/utils/git.sh
. ./scripts/utils/hook.sh

# Constant variables

REMOTE_BRANCHE="${1}"
readonly REMOTE_BRANCHE
URL="${2}"
readonly URL

LOG_FILE="$(git_get_root_dir)/logs/githooks/pre-push.log"
readonly LOG_FILE
LOCAL_BRANCH="$(git_get_local_branch)"
readonly LOCAL_BRANCH
readonly -a BASE_BRANCHES=(
  main
)
readonly -a SUPPORT_BRANCHES=(
  feature
  release
  fix
)

# Internal functions

run_pre_push() {
  local -i result=0

  fs_create_file "${LOG_FILE}"

  hook_prevent_push_to_base_branches "${LOCAL_BRANCH}" "${BASE_BRANCHES[@]}" &>"${LOG_FILE}"
  ((result = $?))
  if ((result == 1)); then
    log_message "githooks" "pre-push" "${result}"

    return "${result}"
  fi

  hook_enforce_naming_convention_of_support_branch "${LOCAL_BRANCH}" "${SUPPORT_BRANCHES[@]}" &>"${LOG_FILE}"
  ((result = $?))
  if ((result == 1)); then
    log_message "githooks" "pre-push" "${result}"

    return "${result}"
  fi

  fs_remove_file "${LOG_FILE}"

  return "${result}"
}

# Control flow logic

run_pre_push
exit "${?}"
